import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import Command
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage

API_TOKEN = 'YOUR_BOT_API_TOKEN'
ADMIN_IDS = [781745483]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
def debug_print(message):
    print(f"DEBUG: {message}")

def init_db():
    try:
        with sqlite3.connect('codes.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''CREATE TABLE IF NOT EXISTS codes (
                                code TEXT PRIMARY KEY, 
                                site_url TEXT)''')
            
            cursor.execute('''CREATE TABLE IF NOT EXISTS used_codes (
                                user_id INTEGER, 
                                ip_address TEXT,
                                code TEXT,
                                PRIMARY KEY (user_id, ip_address, code))''')
            conn.commit()
    except sqlite3.Error as e:
        debug_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_code_to_db(code, site_url):
    try:
        with sqlite3.connect('codes.db') as conn:
            cursor = conn.cursor()
            cursor.execute("INSERT INTO codes (code, site_url) VALUES (?, ?)", (code, site_url))
            conn.commit()
            debug_print(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∫–æ–¥: {code}, —Å URL: {site_url}")
    except sqlite3.Error as e:
        debug_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")

# –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–¥–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def clear_codes():
    try:
        with sqlite3.connect('codes.db') as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM codes")
            conn.commit()
            debug_print("–í—Å–µ –∫–æ–¥—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    except sqlite3.Error as e:
        debug_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –∫–æ–¥–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ –∫–æ–¥ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ IP
def is_code_used(user_id, ip_address, code):
    try:
        with sqlite3.connect('codes.db') as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM used_codes WHERE user_id = ? AND ip_address = ? AND code = ?", 
                           (user_id, ip_address, code))
            result = cursor.fetchone()
            return result is not None
    except sqlite3.Error as e:
        debug_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞: {e}")
        return False

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ–≥–æ IP –∏ –∫–æ–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_user(user_id, ip_address, code):
    try:
        with sqlite3.connect('codes.db') as conn:
            cursor = conn.cursor()
            cursor.execute("INSERT OR IGNORE INTO used_codes (user_id, ip_address, code) VALUES (?, ?, ?)", 
                           (user_id, ip_address, code))
            conn.commit()
            debug_print(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, IP {ip_address}, –∫–æ–¥ {code}")
    except sqlite3.Error as e:
        debug_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, IP –∏ –∫–æ–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–¥–∞
def get_code():
    try:
        with sqlite3.connect('codes.db') as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT code, site_url FROM codes LIMIT 1")
            code = cursor.fetchone()
            if code:
                # –£–¥–∞–ª—è–µ–º –∫–æ–¥ –ø–æ—Å–ª–µ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                cursor.execute("DELETE FROM codes WHERE code = ?", (code[0],))
                conn.commit()
                debug_print(f"–ö–æ–¥ {code[0]} –≤—ã–¥–∞–Ω –∏ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                return code
        return None
    except sqlite3.Error as e:
        debug_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–∞: {e}")
        return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ üéüÔ∏è", callback_data="get_code"))

    await message.reply(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø ‚Äî –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤ üßë‚Äçüíª.\n\n"
        "üìù –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –∫–æ–¥! üéâ\n"
        "üîπ –£–¥–∞—á–∏ –∏ –Ω–µ –∑–∞–±—ã–≤–∞–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–¥ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ! üîπ",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /getcode —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
@dp.callback_query_handler(lambda c: c.data == "get_code")
async def send_code(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π IP-–∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ip_address = callback_query.from_user.language_code  # –ó–¥–µ—Å—å –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π IP —á–µ—Ä–µ–∑ webhooks, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ

    code_data = get_code()

    if code_data:
        code, site_url = code_data

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ –∫–æ–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ IP
        if is_code_used(user_id, ip_address, code):  
            await bot.send_message(
                callback_query.from_user.id,
                "üö® <b>–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ–¥!</b> üö®\n\n"
                "–ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ —Å –æ–¥–Ω–æ–≥–æ IP. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üòä",
                parse_mode=ParseMode.HTML
            )
            return

        # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç
        keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç üåê", url=site_url)
        )
        await bot.send_message(
            callback_query.from_user.id,
            f"<b>–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥:</b> <code>{code}</code>\n\n"
            f"üéâ –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å! –ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫! üí∏\n"
            f"–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç: {site_url}",
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ–≥–æ IP –∏ –∫–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
        add_user(user_id, ip_address, code)
    else:
        await bot.send_message(
            callback_query.from_user.id,
            "üö® <b>–ö–æ–¥—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!</b> üö®\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –∫–æ–¥—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML
        )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞
@dp.message_handler(commands=["addcode"])
async def add_code(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ –∏ URL —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await message.reply("üîπ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ABC123):")
    await dp.register_message_handler(process_code, state="code", user_id=message.from_user.id)

async def process_code(message: types.Message):
    code = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
    with sqlite3.connect('codes.db') as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT code FROM codes WHERE code = ?", (code,))
        if cursor.fetchone():
            await message.reply("üö® –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

    # –ü–æ–ø—Ä–æ—Å–∏–º URL –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞
    await message.reply("üîπ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –∫–æ–¥–∞:")
    await dp.register_message_handler(process_url, state="url", user_id=message.from_user.id, code=code)

async def process_url(message: types.Message, state: FSMContext):
    url = message.text.strip()

    code = (await state.get_data())["code"]

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_code_to_db(code, url)
    await message.reply(f"‚úÖ –ö–æ–¥ {code} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å URL {url}!")

    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.finish()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –∫–æ–¥–æ–≤
@dp.message_handler(commands=["clearcodes"])
async def clear_codes_command(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–æ–¥—ã
    clear_codes()
    await message.reply("‚úÖ –í—Å–µ –∫–æ–¥—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    init_db()
    executor.start_polling(dp, skip_updates=True)
