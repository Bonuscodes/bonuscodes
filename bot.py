import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import FSMContext
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

API_TOKEN = '8007886958:AAEy-Yob9wAOpDWThKX3vVB0ApJB3E6b3Qc'  # –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
ADMIN_IDS = [781745483]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

def debug_print(message):
    print(f"DEBUG: {message}")

def init_db():
    try:
        with sqlite3.connect('codes.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''CREATE TABLE IF NOT EXISTS codes (
                                code TEXT PRIMARY KEY, 
                                site_url TEXT)''')
            
            cursor.execute('''PRAGMA table_info(codes)''')
            columns = [column[1] for column in cursor.fetchall()]
            debug_print(f"–¢–µ–∫—É—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü–µ codes: {columns}")

            if 'site_url' not in columns:
                cursor.execute('ALTER TABLE codes ADD COLUMN site_url TEXT')
                debug_print("–°—Ç–æ–ª–±–µ—Ü site_url –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É.")
            
            cursor.execute('''CREATE TABLE IF NOT EXISTS used_codes (
                                user_id INTEGER, 
                                ip_address TEXT,
                                code TEXT,
                                PRIMARY KEY (user_id, ip_address, code))''')
            conn.commit()
    except sqlite3.Error as e:
        debug_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ –∫–æ–¥ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ IP
def is_code_used(user_id, ip_address, code):
    try:
        with sqlite3.connect('codes.db') as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM used_codes WHERE user_id = ? AND ip_address = ? AND code = ?", 
                           (user_id, ip_address, code))
            result = cursor.fetchone()
        return result is not None
    except sqlite3.Error as e:
        debug_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞: {e}")
        return False

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ–≥–æ IP –∏ –∫–æ–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_user(user_id, ip_address, code):
    try:
        with sqlite3.connect('codes.db') as conn:
            cursor = conn.cursor()
            cursor.execute("INSERT OR IGNORE INTO used_codes (user_id, ip_address, code) VALUES (?, ?, ?)", 
                           (user_id, ip_address, code))
            conn.commit()
    except sqlite3.Error as e:
        debug_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, IP –∏ –∫–æ–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞ –∏ —Å–∞–π—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_code_to_db(code, site_url):
    try:
        debug_print(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞: {code}, —Å–∞–π—Ç–∞: {site_url}")
        with sqlite3.connect('codes.db') as conn:
            cursor = conn.cursor()
            cursor.execute("INSERT OR IGNORE INTO codes (code, site_url) VALUES (?, ?)", (code, site_url))
            conn.commit()
    except sqlite3.Error as e:
        debug_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–¥–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_all_codes():
    try:
        with sqlite3.connect('codes.db') as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT code, site_url FROM codes")
            return cursor.fetchall()
    except sqlite3.Error as e:
        debug_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∫–æ–¥–æ–≤: {e}")
        return []

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Form(StatesGroup):
    waiting_for_code = State()
    waiting_for_site = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /addcode –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@dp.message_handler(commands=['addcode'])
async def cmd_add_code(message: types.Message):
    if message.from_user.id in ADMIN_IDS:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:")
        await Form.waiting_for_code.set()  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞
@dp.message_handler(state=Form.waiting_for_code)
async def process_code(message: types.Message, state: FSMContext):
    code = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥
    await state.update_data(code=code)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer(f"‚úÖ –ö–æ–¥ '{code}' –ø–æ–ª—É—á–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–¥–∞:")
    await Form.waiting_for_site.set()  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∞–π—Ç–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–π—Ç–∞
@dp.message_handler(state=Form.waiting_for_site)
async def process_url(message: types.Message, state: FSMContext):
    site_url = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É
    user_data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    code = user_data['code']  # –ë–µ—Ä–µ–º –∫–æ–¥ –∏–∑ –¥–∞–Ω–Ω—ã—Ö

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –∏ —Å–∞–π—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_code_to_db(code, site_url)

    await message.answer(f"‚úÖ –ö–æ–¥ '{code}' —Å —Å–∞–π—Ç–æ–º '{site_url}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–∞—á–∏ –∫–æ–¥–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Å–∞–π—Ç–∞–º–∏
def get_code():
    try:
        with sqlite3.connect('codes.db') as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT code, site_url FROM codes LIMIT 1")
            code = cursor.fetchone()
            if code:
                cursor.execute("DELETE FROM codes WHERE code = ?", (code[0],))
                conn.commit()
                return code
        return None
    except sqlite3.Error as e:
        debug_print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–∞: {e}")
        return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ üéüÔ∏è", callback_data="get_code"))

    await message.reply(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø ‚Äî –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤ üßë‚Äçüíª.\n\n"
        "üìù –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –∫–æ–¥! üéâ\n"
        "üîπ –£–¥–∞—á–∏ –∏ –Ω–µ –∑–∞–±—ã–≤–∞–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–¥ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ! üîπ",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /viewcodes –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@dp.message_handler(commands=["viewcodes"])
async def view_codes(message: types.Message):
    if message.from_user.id in ADMIN_IDS:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        codes = get_all_codes()
        if codes:
            response = "üìú –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–¥–æ–≤:\n\n"
            for code, site_url in codes:
                response += f"<b>–ö–æ–¥:</b> {code} - <b>–°–∞–π—Ç:</b> {site_url}\n"
            await message.answer(response, parse_mode=ParseMode.HTML)
        else:
            await message.answer("üö® –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–¥–æ–≤.")
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /getcode —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
@dp.callback_query_handler(lambda c: c.data == "get_code")
async def send_code(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    # –î–ª—è —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π IP-–∞–¥—Ä–µ—Å
    ip_address = "unknown_ip"  # –ó–¥–µ—Å—å –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π IP, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ webhook

    code_data = get_code()

    if code_data:
        code, site_url = code_data

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ –∫–æ–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ IP
        if is_code_used(user_id, ip_address, code):  
            await bot.send_message(
                callback_query.from_user.id,
                "üö® <b>–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ–¥!</b> üö®\n\n"
                "–ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ —Å –æ–¥–Ω–æ–≥–æ IP. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üòä",
                parse_mode=ParseMode.HTML
            )
            return

        # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç
        keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç üåê", url=site_url)
        )
        await bot.send_message(
            callback_query.from_user.id,
            f"<b>–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥:</b> <code>{code}</code>\n\n"
            f"üéâ –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å! –ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫! üí∏\n"
            f"–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç: {site_url}",
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
        add_user(user_id, ip_address, code)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ–≥–æ IP –∏ –∫–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    else:
        await bot.send_message(
            callback_query.from_user.id,
            "üö® <b>–ö–æ–¥—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!</b> üö®\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –∫–æ–¥—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML
        )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    init_db()
    executor.start_polling(dp, skip_updates=True)
