import sqlite3
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import FSMContext
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiohttp import web  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–±—Ö—É–∫–∞–º–∏
import os
from urllib.parse import urlparse

API_TOKEN = '8007886958:AAEy-Yob9wAOpDWThKX3vVB0ApJB3E6b3Qc'  # –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
ADMIN_IDS = [781745483]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
CHANNEL_ID = "@scattercasinostream"  # –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()  # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç MemoryStorage
dp = Dispatcher(bot, storage=storage)  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è dispatcher
dp.middleware.setup(LoggingMiddleware())  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    return sqlite3.connect('codes.db', check_same_thread=False)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ check_same_thread=False –¥–ª—è –º–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–æ—Å—Ç–∏

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
def create_tables():
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS codes (
                            code TEXT PRIMARY KEY, 
                            site_url TEXT)''')

        cursor.execute('''CREATE TABLE IF NOT EXISTS used_ips (
                            user_id INTEGER PRIMARY KEY,
                            ip_address TEXT)''')  # –•—Ä–∞–Ω–∏–º IP-–∞–¥—Ä–µ—Å–∞
        conn.commit()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Form(StatesGroup):
    waiting_for_code = State()
    waiting_for_site = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞ –∏ —Å–∞–π—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_code_to_db(code, site_url):
    logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞: {code}, —Å–∞–π—Ç–∞: {site_url}")
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("INSERT OR IGNORE INTO codes (code, site_url) VALUES (?, ?)", (code, site_url))
        conn.commit()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª
async def check_subscription(user_id):
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        if member.status in ["member", "administrator", "creator"]:
            return True
        else:
            return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL
def is_valid_url(url):
    parsed_url = urlparse(url)
    return parsed_url.scheme in ['http', 'https'] and parsed_url.netloc != ''

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ IP
def is_ip_used(ip_address):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM used_ips WHERE ip_address = ?", (ip_address,))
        return cursor.fetchone() is not None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è IP-–∞–¥—Ä–µ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_ip(ip_address, user_id):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("INSERT OR IGNORE INTO used_ips (user_id, ip_address) VALUES (?, ?)", (user_id, ip_address))
        conn.commit()

# –ö–æ–º–∞–Ω–¥–∞ /addcode –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@dp.message_handler(commands=['addcode'])
async def cmd_add_code(message: types.Message):
    if message.from_user.id in ADMIN_IDS:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:")
        await Form.waiting_for_code.set()  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞
@dp.message_handler(state=Form.waiting_for_code)
async def process_code(message: types.Message, state: FSMContext):
    code = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥
    await state.update_data(code=code)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer(f"‚úÖ –ö–æ–¥ '{code}' –ø–æ–ª—É—á–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–¥–∞:")
    await Form.waiting_for_site.set()  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∞–π—Ç–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–π—Ç–∞
@dp.message_handler(state=Form.waiting_for_site)
async def process_url(message: types.Message, state: FSMContext):
    site_url = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É
    user_data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    code = user_data['code']  # –ë–µ—Ä–µ–º –∫–æ–¥ –∏–∑ –¥–∞–Ω–Ω—ã—Ö

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ URL
    if not is_valid_url(site_url):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –∏ —Å–∞–π—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_code_to_db(code, site_url)

    await message.answer(f"‚úÖ –ö–æ–¥ '{code}' —Å —Å–∞–π—Ç–æ–º '{site_url}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–∞—á–∏ –∫–æ–¥–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Å–∞–π—Ç–∞–º–∏
def get_code():
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT code, site_url FROM codes LIMIT 1")
        code = cursor.fetchone()
        if code:
            cursor.execute("DELETE FROM codes WHERE code = ?", (code[0],))
            conn.commit()
            return code
    return None

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ –∫–æ–¥ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_code_used(user_id):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM used_ips WHERE user_id = ?", (user_id,))
        return cursor.fetchone() is not None

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_user(user_id):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("INSERT OR IGNORE INTO used_ips (user_id) VALUES (?)", (user_id,))
        conn.commit()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ üéüÔ∏è", callback_data="get_code"))

    await message.reply(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø ‚Äî –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤ üßë‚Äçüíª.\n\n"
        "üìù –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –∫–æ–¥! üéâ\n"
        "üîπ –£–¥–∞—á–∏ –∏ –Ω–µ –∑–∞–±—ã–≤–∞–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–¥ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ! üîπ",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /getcode —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
@dp.callback_query_handler(lambda c: c.data == "get_code")
async def send_code(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª
    if not await check_subscription(user_id):
        await bot.send_message(
            callback_query.from_user.id,
            "üö® –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥, –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: https://t.me/scattercasinostream üö®\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥' –µ—â–µ —Ä–∞–∑.",
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ –∫–æ–¥
    if is_code_used(user_id):
        await bot.send_message(
            callback_query.from_user.id,
            "üö® <b>–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ–¥!</b> üö®\n\n"
            "–ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üòä",
            parse_mode=ParseMode.HTML
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    code_data = get_code()

    if code_data:
        code, site_url = code_data
        keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç üåê", url=site_url)
        )
        await bot.send_message(
            callback_query.from_user.id,
            f"<b>–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥:</b> <code>{code}</code>\n\n"
            f"üéâ –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å! –ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫! üí∏\n"
            f"–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç: {site_url}",
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )

        # –ü–æ–ª—É—á–∞–µ–º IP-–∞–¥—Ä–µ—Å
        ip_address = callback_query.from_user.id  # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –º–µ—Å—Ç–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP —á–µ—Ä–µ–∑ webhook
        add_user(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–µ–≥–æ –∫–æ–¥
        add_ip(ip_address, user_id)  # –î–æ–±–∞–≤–ª—è–µ–º IP-–∞–¥—Ä–µ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    else:
        await bot.send_message(
            callback_query.from_user.id,
            "üö® <b>–ö–æ–¥—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!</b> üö®\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –∫–æ–¥—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML
        )

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –¥–ª—è Render
WEBHOOK_PATH = '/webhook'  # –ü—É—Ç—å –¥–ª—è –≤–µ–±—Ö—É–∫–∞
WEBHOOK_URL = f'https://telegram-bot-54c4.onrender.com'  # –£–∫–∞–∂–∏—Ç–µ URL –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Render

async def on_start():
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, webhook)
    return app

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞
async def webhook(request):
    json_str = await request.json()
    update = types.Update(**json_str)
    await dp.process_update(update)
    return web.Response()

# –ó–∞–ø—É—Å–∫ –≤–µ–±—Ö—É–∫–æ–≤
if __name__ == "__main__":
    create_tables()  # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, webhook)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    web.run_app(app, host="0.0.0.0", port=10000)  # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 10000
