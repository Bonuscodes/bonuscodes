import asyncpg
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiohttp import web
import asyncio

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv('API_TOKEN')
admin_ids_str = os.getenv('ADMIN_IDS', '')
ADMIN_IDS = [int(id.strip()) for id in admin_ids_str.split(',') if id.strip()]
CHANNEL_ID = os.getenv('CHANNEL_ID')
DB_USER = os.getenv('DB_USER')
DB_PASSWORD = os.getenv('DB_PASSWORD')
DB_NAME = os.getenv('DB_NAME')
DB_HOST = os.getenv('DB_HOST', 'localhost')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')

# –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
if not API_TOKEN:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω API_TOKEN")
if not ADMIN_IDS:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã ADMIN_IDS")
if not CHANNEL_ID:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω CHANNEL_ID")
if not DB_USER:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω DB_USER")
if not DB_PASSWORD:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω DB_PASSWORD")
if not DB_NAME:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω DB_NAME")
if not WEBHOOK_URL:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω WEBHOOK_URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://–≤–∞—à-–¥–æ–º–µ–Ω.onrender.com)")

bot = Bot(token=API_TOKEN)
Bot.set_current(bot)  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–æ—Ç
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async def get_db_connection():
    return await asyncpg.connect(
        user=DB_USER,
        password=DB_PASSWORD,
        database=DB_NAME,
        host=DB_HOST,
    )

async def create_tables():
    conn = await get_db_connection()
    await conn.execute('''
        CREATE TABLE IF NOT EXISTS codes (
            code TEXT PRIMARY KEY, 
            site_url TEXT
        )
    ''')
    await conn.execute('''
        CREATE TABLE IF NOT EXISTS used_ips (
            user_id INTEGER PRIMARY KEY,
            ip_address TEXT
        )
    ''')
    await conn.execute('''
        CREATE INDEX IF NOT EXISTS idx_used_ips_user_id ON used_ips (user_id);
    ''')
    await conn.execute('''
        CREATE INDEX IF NOT EXISTS idx_codes_code ON codes (code);
    ''')
    await conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–¥–æ–≤
async def get_all_codes():
    conn = await get_db_connection()
    codes = await conn.fetch("SELECT code, site_url FROM codes")
    await conn.close()
    return codes

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞
async def add_code_to_db(code: str, site_url: str):
    conn = await get_db_connection()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    existing_code = await conn.fetchval("SELECT 1 FROM codes WHERE code = $1", code)
    if existing_code:
        await conn.close()
        return False  # –ö–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await conn.execute("INSERT INTO codes (code, site_url) VALUES ($1, $2)", code, site_url)
    await conn.close()
    return True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–¥–∞
async def delete_code_from_db(code: str):
    conn = await get_db_connection()
    deleted_count = await conn.execute("DELETE FROM codes WHERE code = $1", code)
    await conn.close()
    return deleted_count > 0

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Form(StatesGroup):
    waiting_for_code = State()
    waiting_for_site = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ üéüÔ∏è", callback_data="get_code"))
    await message.reply(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø ‚Äî –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤ üßë‚Äçüíª.\n\n"
        "üìù –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –∫–æ–¥! üéâ",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_codes
@dp.message_handler(commands=["list_codes"])
async def list_codes(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    codes = await get_all_codes()
    if codes:
        codes_text = "\n".join([f"–ö–æ–¥: {code['code']}, URL: {code['site_url']}" for code in codes])
        await message.reply(f"–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–¥–æ–≤:\n\n{codes_text}")
    else:
        await message.reply("–ù–µ—Ç –∫–æ–¥–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_code
@dp.message_handler(commands=["add_code"])
async def add_code(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    parts = message.text.split(" ", 2)
    if len(parts) < 3:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_code <–∫–æ–¥> <URL>")
        return

    code, site_url = parts[1], parts[2]
    success = await add_code_to_db(code, site_url)

    if success:
        await message.reply(f"–ö–æ–¥ {code} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await message.reply(f"–ö–æ–¥ {code} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_code
@dp.message_handler(commands=["delete_code"])
async def delete_code(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    parts = message.text.split(" ", 1)
    if len(parts) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_code <–∫–æ–¥>")
        return

    code = parts[1]
    success = await delete_code_from_db(code)

    if success:
        await message.reply(f"–ö–æ–¥ {code} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    else:
        await message.reply(f"–ö–æ–¥ {code} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

# –í–µ–±—Ö—É–∫ –¥–ª—è –ø—Ä–∏–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
WEBHOOK_PATH = '/webhook'

async def webhook(request):
    try:
        json_str = await request.json()
        update = types.Update(**json_str)
        await dp.process_update(update)
        return web.Response()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ –≤–µ–±—Ö—É–∫–µ")  # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        return web.Response(status=500)

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    asyncio.run(create_tables())
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    asyncio.run(bot.set_webhook(WEBHOOK_URL + "/webhook"))
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤–µ–±—Ö—É–∫–æ–≤
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, webhook)
    web.run_app(app, host="0.0.0.0", port=10000)
