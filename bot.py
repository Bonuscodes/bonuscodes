import asyncpg
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import FSMContext
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiohttp import web  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–±—Ö—É–∫–∞–º–∏
from urllib.parse import urlparse

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv('API_TOKEN')  # –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
admin_ids_str = os.getenv('ADMIN_IDS', '')
ADMIN_IDS = [int(id.strip()) for id in admin_ids_str.split(',') if id.strip()]  # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
CHANNEL_ID = os.getenv('CHANNEL_ID')  # –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
DB_USER = os.getenv('DB_USER')  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PASSWORD = os.getenv('DB_PASSWORD')  # –ü–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_NAME = os.getenv('DB_NAME')  # –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_HOST = os.getenv('DB_HOST', 'localhost')  # –•–æ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (localhost –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
WEBHOOK_URL = os.getenv('WEBHOOK_URL')  # –£–∫–∞–∂–∏—Ç–µ URL –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Render

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not API_TOKEN:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω API_TOKEN")
if not ADMIN_IDS:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã ADMIN_IDS")
if not CHANNEL_ID:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω CHANNEL_ID")
if not DB_USER:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω DB_USER")
if not DB_PASSWORD:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω DB_PASSWORD")
if not DB_NAME:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω DB_NAME")
if not WEBHOOK_URL:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω WEBHOOK_URL")

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()  # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç MemoryStorage
dp = Dispatcher(bot, storage=storage)  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è dispatcher
dp.middleware.setup(LoggingMiddleware())  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
async def get_db_connection():
    return await asyncpg.connect(
        user=DB_USER, 
        password=DB_PASSWORD, 
        database=DB_NAME, 
        host=DB_HOST,
    )

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
async def create_tables():
    conn = await get_db_connection()
    await conn.execute('''
        CREATE TABLE IF NOT EXISTS codes (
            code TEXT PRIMARY KEY, 
            site_url TEXT
        )
    ''')
    await conn.execute('''
        CREATE TABLE IF NOT EXISTS used_ips (
            user_id INTEGER PRIMARY KEY,
            ip_address TEXT
        )
    ''')
    await conn.close()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Form(StatesGroup):
    waiting_for_code = State()
    waiting_for_site = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞ –∏ —Å–∞–π—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def add_code_to_db(code, site_url):
    logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞: {code}, —Å–∞–π—Ç–∞: {site_url}")
    conn = await get_db_connection()
    await conn.execute(
        "INSERT INTO codes (code, site_url) VALUES ($1, $2) ON CONFLICT (code) DO NOTHING", 
        code, site_url
    )
    await conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª
async def check_subscription(user_id):
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        if member.status in ["member", "administrator", "creator"]:
            return True
        else:
            return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL
def is_valid_url(url):
    parsed_url = urlparse(url)
    return parsed_url.scheme in ['http', 'https'] and parsed_url.netloc != ''

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ IP
async def is_ip_used(ip_address):
    conn = await get_db_connection()
    result = await conn.fetchrow("SELECT * FROM used_ips WHERE ip_address = $1", ip_address)
    await conn.close()
    return result is not None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è IP-–∞–¥—Ä–µ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def add_ip(ip_address, user_id):
    conn = await get_db_connection()
    await conn.execute(
        "INSERT INTO used_ips (user_id, ip_address) VALUES ($1, $2) ON CONFLICT (user_id) DO NOTHING",
        user_id, ip_address
    )
    await conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /addcode –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@dp.message_handler(commands=['addcode'])
async def cmd_add_code(message: types.Message):
    if message.from_user.id in ADMIN_IDS:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:")
        await Form.waiting_for_code.set()  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞
@dp.message_handler(state=Form.waiting_for_code)
async def process_code(message: types.Message, state: FSMContext):
    code = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥
    await state.update_data(code=code)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer(f"‚úÖ –ö–æ–¥ '{code}' –ø–æ–ª—É—á–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–¥–∞:")
    await Form.waiting_for_site.set()  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∞–π—Ç–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–π—Ç–∞
@dp.message_handler(state=Form.waiting_for_site)
async def process_url(message: types.Message, state: FSMContext):
    site_url = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É
    user_data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    code = user_data['code']  # –ë–µ—Ä–µ–º –∫–æ–¥ –∏–∑ –¥–∞–Ω–Ω—ã—Ö

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ URL
    if not is_valid_url(site_url):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –∏ —Å–∞–π—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await add_code_to_db(code, site_url)

    await message.answer(f"‚úÖ –ö–æ–¥ '{code}' —Å —Å–∞–π—Ç–æ–º '{site_url}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–∞—á–∏ –∫–æ–¥–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Å–∞–π—Ç–∞–º–∏
async def get_code():
    conn = await get_db_connection()
    code_data = await conn.fetchrow("SELECT code, site_url FROM codes LIMIT 1")
    if code_data:
        await conn.execute("DELETE FROM codes WHERE code = $1", code_data['code'])
    await conn.close()
    return code_data

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ –∫–æ–¥ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def is_code_used(user_id):
    conn = await get_db_connection()
    result = await conn.fetchrow("SELECT * FROM used_ips WHERE user_id = $1", user_id)
    await conn.close()
    return result is not None

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def add_user(user_id):
    conn = await get_db_connection()
    await conn.execute("INSERT INTO used_ips (user_id) VALUES ($1) ON CONFLICT (user_id) DO NOTHING", user_id)
    await conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ üéüÔ∏è", callback_data="get_code"))

    await message.reply(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø ‚Äî –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤ üßë‚Äçüíª.\n\n"
        "üìù –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –∫–æ–¥! üéâ\n"
        "üîπ –£–¥–∞—á–∏ –∏ –Ω–µ –∑–∞–±—ã–≤–∞–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–¥ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ! üîπ",
        reply_markup=keyboard
    )

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –¥–ª—è Render
WEBHOOK_PATH = '/webhook'  # –ü—É—Ç—å –¥–ª—è –≤–µ–±—Ö—É–∫–∞

async def on_start():
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –¥–ª—è –±–æ—Ç–∞
    await bot.set_webhook(WEBHOOK_URL + WEBHOOK_PATH)
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, webhook)
    return app

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞
async def webhook(request):
    json_str = await request.json()
    update = types.Update(**json_str)
    await dp.process_update(update)
    return web.Response()

# –ó–∞–ø—É—Å–∫ –≤–µ–±—Ö—É–∫–æ–≤
if __name__ == "__main__":
    # –í—ã–∑—ã–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    from asyncio import run
    run(create_tables())  # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, webhook)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    web.run_app(app, host="0.0.0.0", port=10000)  # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 10000
